DECLARE
   P_PM_SCHEDULE_REC               EAM_PMDEF_PUB.PM_SCHEDULING_REC_TYPE;
   P_PM_ACTIVITIES_TBL             EAM_PMDEF_PUB.PM_ACTIVITIES_GRP_TBL_TYPE;
   P_PM_DAY_INTERVAL_RULES_TBL     EAM_PMDEF_PUB.PM_RULE_TBL_TYPE;
   P_PM_RUNTIME_RULES_TBL          EAM_PMDEF_PUB.PM_RULE_TBL_TYPE;
   P_PM_LIST_DATE_RULES_TBL        EAM_PMDEF_PUB.PM_RULE_TBL_TYPE;
   P_PM_CALENDAR_BASED_RULES_TBL   EAM_PMDEF_PUB.PM_RULE_TBL_TYPE;
   X_RETURN_STATUS                 VARCHAR2 (100);
   X_MSG_COUNT                     NUMBER;
   X_MSG_DATA                      VARCHAR2 (4000);
   X_MESSAGE_LIST                  ERROR_HANDLER.ERROR_TBL_TYPE;
   X_NEW_PM_SCHEDULE_ID            NUMBER;
   V_ACTIVITY_ID                   NUMBER;
   V_ASSOCIATION_ID                NUMBER;
   V_SET_NAME_ID                   NUMBER;
   V_OBJECT_ID                     NUMBER; -- inventory_item_id for asset_group, or instance_id for asset_number
   V_OBJECT_TYPE                   NUMBER := 3; -- 2=asset_group, 3=asset_number, 4=rebuildable_item
   V_TYPE_CODE                     VARCHAR2 (10) := '20'; --pm type: 10=rule 20=list_date 30=calendar
   V_METHOD_CODE                   VARCHAR2 (10) := '10'; --next service date: 10=start_date 20=end_date
   V_RESCHEDULING_POINT            NUMBER := 1; --used date: 1=asd 2=aed 3=ssd 4=sed 5=base_date 6=base_meter
   V_METER_ID                      NUMBER;
   LINE_ID                         NUMBER;
   I                               NUMBER := 1;
   J                               NUMBER := 1;


   CURSOR PMSCH
   IS
      SELECT *
        FROM FRT_EAM_INTERFACE
       WHERE ID > 1;
BEGIN
   MO_GLOBAL.SET_POLICY_CONTEXT ('S', 81);
   FND_GLOBAL.APPS_INITIALIZE (USER_ID        => 2887,
                               RESP_ID        => 23118,
                               RESP_APPL_ID   => 426);

   FOR PM IN PMSCH
   LOOP
      BEGIN
         SELECT SET_NAME_ID
           INTO V_SET_NAME_ID
           FROM EAM_PM_SET_NAMES
          WHERE SET_NAME = 'AFM_INT04';

         V_OBJECT_ID := PM.C2;
         -- Header information
         P_PM_SCHEDULE_REC.SET_NAME_ID := V_SET_NAME_ID;
         P_PM_SCHEDULE_REC.NAME := PM.C1;
         P_PM_SCHEDULE_REC.FROM_EFFECTIVE_DATE := SYSDATE;
         P_PM_SCHEDULE_REC.MAINTENANCE_OBJECT_ID := V_OBJECT_ID;
         P_PM_SCHEDULE_REC.MAINTENANCE_OBJECT_TYPE := V_OBJECT_TYPE;
         P_PM_SCHEDULE_REC.TYPE_CODE := V_TYPE_CODE;                      --10
         P_PM_SCHEDULE_REC.RESCHEDULING_POINT := V_RESCHEDULING_POINT;     --2
         P_PM_SCHEDULE_REC.SCHEDULING_METHOD_CODE := V_METHOD_CODE;       --10
         P_PM_SCHEDULE_REC.WHICHEVER_FIRST := 'Y';
         P_PM_SCHEDULE_REC.GENERATE_WO_STATUS := 1;
         P_PM_SCHEDULE_REC.GENERATE_NEXT_WORK_ORDER := 'N';
         P_PM_SCHEDULE_REC.DEFAULT_IMPLEMENT := 'Y';
         P_PM_SCHEDULE_REC.INCLUDE_MANUAL := 'Y';
         P_PM_SCHEDULE_REC.NON_SCHEDULED_FLAG := 'N';
         P_PM_SCHEDULE_REC.INTERVAL_PER_CYCLE := 1;
         P_PM_SCHEDULE_REC.CURRENT_CYCLE := 1;
         P_PM_SCHEDULE_REC.CURRENT_SEQ := 0;
         P_PM_SCHEDULE_REC.AUTO_INSTANTIATION_FLAG := 'N'; --FOR TEMPLATE
         P_PM_SCHEDULE_REC.DAY_TOLERANCE := 3;
         P_PM_SCHEDULE_REC.TMPL_FLAG := 'N'; -- Y=Schedule_Template, N=Schedule
         P_PM_SCHEDULE_REC.SOURCE_CODE := 'EAM';
         P_PM_SCHEDULE_REC.SOURCE_LINE := '1';

         V_ACTIVITY_ID := PM.C4;

         SELECT ACTIVITY_ASSOCIATION_ID
           INTO V_ASSOCIATION_ID
           FROM MTL_EAM_ASSET_ACTIVITIES
          WHERE     ASSET_ACTIVITY_ID = V_ACTIVITY_ID
                AND MAINTENANCE_OBJECT_TYPE = V_OBJECT_TYPE
                AND MAINTENANCE_OBJECT_ID = V_OBJECT_ID;

         -- Activity Template association
         -- ACTIVITY_ASSOCIATION_ID in table
         P_PM_ACTIVITIES_TBL (I).ACTIVITY_ASSOCIATION_ID := V_ASSOCIATION_ID;
         P_PM_ACTIVITIES_TBL (I).INTERVAL_MULTIPLE:=1;
         P_PM_ACTIVITIES_TBL (I).ALLOW_REPEAT_IN_CYCLE := 'N';
         P_PM_ACTIVITIES_TBL (I).NEXT_SERVICE_START_DATE := NULL;
         P_PM_ACTIVITIES_TBL (I).NEXT_SERVICE_END_DATE := NULL;

         -- Rules information
         -- RULE_TYPE 1=date_rule, 2=meter_rule, 3=date_list, 4=calendar_rule
         P_PM_LIST_DATE_RULES_TBL (J).RULE_TYPE := 3;
         P_PM_LIST_DATE_RULES_TBL (J).LIST_DATE :=
            TO_DATE (PM.C6, 'MM/DD/YYYY');
         P_PM_LIST_DATE_RULES_TBL (J).LIST_DATE_DESC := PM.C5;
         P_PM_LIST_DATE_RULES_TBL (J).EFFECTIVE_DATE_FROM := SYSDATE;
         P_PM_LIST_DATE_RULES_TBL (J).EFFECTIVE_DATE_TO := NULL;

ERROR_HANDLER.INITIALIZE;

         EAM_PMDEF_PUB.CREATE_PM_DEF (
            P_API_VERSION                   => 1.0,
            P_INIT_MSG_LIST                 => 'F',
            P_COMMIT                        => 'F',
            P_VALIDATION_LEVEL              => FND_API.G_VALID_LEVEL_FULL,
            P_PM_SCHEDULE_REC               => P_PM_SCHEDULE_REC,
            P_PM_ACTIVITIES_TBL             => P_PM_ACTIVITIES_TBL,
            P_PM_DAY_INTERVAL_RULES_TBL     => P_PM_DAY_INTERVAL_RULES_TBL,
            P_PM_RUNTIME_RULES_TBL          => P_PM_RUNTIME_RULES_TBL,
            P_PM_LIST_DATE_RULES_TBL        => P_PM_LIST_DATE_RULES_TBL,
            P_PM_CALENDAR_BASED_RULES_TBL   => P_PM_CALENDAR_BASED_RULES_TBL,
            X_NEW_PM_SCHEDULE_ID            => X_NEW_PM_SCHEDULE_ID,
            X_RETURN_STATUS                 => X_RETURN_STATUS,
            X_MSG_COUNT                     => X_MSG_COUNT,
            X_MSG_DATA                      => X_MSG_DATA);

         DBMS_OUTPUT.PUT_LINE (
            'X_NEW_PM_SCHEDULE_ID : ' || X_NEW_PM_SCHEDULE_ID);
         DBMS_OUTPUT.PUT_LINE ('X_RETURN_STATUS : ' || X_RETURN_STATUS);

         IF (X_RETURN_STATUS = 'S')
         THEN
            DBMS_OUTPUT.PUT_LINE ('Done!');
         ELSE
            DBMS_OUTPUT.PUT_LINE (
                  'Error: '
               || FND_MSG_PUB.GET (P_MSG_INDEX   => FND_MSG_PUB.G_LAST,
                                   P_ENCODED     => FND_API.G_FALSE));
            ERROR_HANDLER.GET_MESSAGE_LIST (X_MESSAGE_LIST);

            FOR N IN 1 .. X_MESSAGE_LIST.COUNT
            LOOP
               DBMS_OUTPUT.PUT_LINE (X_MESSAGE_LIST (N).MESSAGE_TEXT);
            END LOOP;
         END IF;

         COMMIT;
      EXCEPTION
         WHEN OTHERS
         THEN
            DBMS_OUTPUT.PUT_LINE ('Error: ' || SQLERRM);
      END;
   END LOOP;
END;