DECLARE
   P_PM_SCHEDULE_REC               EAM_PMDef_Pub.PM_SCHEDULING_REC_TYPE;
   P_PM_ACTIVITIES_TBL             EAM_PMDef_Pub.PM_ACTIVITIES_GRP_TBL_TYPE;
   P_PM_DAY_INTERVAL_RULES_TBL     EAM_PMDef_Pub.PM_RULE_TBL_TYPE;
   P_PM_RUNTIME_RULES_TBL          EAM_PMDef_Pub.PM_RULE_TBL_TYPE;
   P_PM_LIST_DATE_RULES_TBL        EAM_PMDef_Pub.PM_RULE_TBL_TYPE;
   P_PM_CALENDAR_BASED_RULES_TBL   EAM_PMDef_Pub.PM_RULE_TBL_TYPE;
   X_RETURN_STATUS                 VARCHAR2 (100);
   X_MSG_COUNT                     NUMBER;
   X_MSG_DATA                      VARCHAR2 (4000);
   X_MESSAGE_LIST                  ERROR_HANDLER.ERROR_TBL_TYPE;
   X_NEW_PM_SCHEDULE_ID            NUMBER;
   V_ACTIVITY_ID                   NUMBER;
   V_ASSOCIATION_ID                NUMBER;
   V_SET_NAME_ID                   NUMBER;
   V_OBJECT_ID                     NUMBER; -- inventory_item_id for asset_group, or instance_id for asset_number
   V_OBJECT_TYPE                   NUMBER := 2; -- 2=asset_group, 3=asset_number-rebuildable_number, 4=rebuildable_item
   V_TYPE_CODE                     VARCHAR2 (10) := '10'; --pm type: 10=rule 20=list_date 30=calendar
   V_METHOD_CODE                   VARCHAR2 (10) := '10'; --next service date: 10=start_date 20=end_date
   V_RESCHEDULING_POINT            NUMBER := 2; --used date: 1=asd 2=aed 3=ssd 4=sed 5=base_date 6=base_meter
   V_METER_ID                      NUMBER;
   LINE_ID                         NUMBER:=98;
   I                               NUMBER := 1;
   J                               NUMBER := 1;

   CURSOR PMSCH
   IS
      SELECT DISTINCT C02,C03,C09,C10 FROM FRT_EAM_INTERFACE WHERE ID=LINE_ID;

   CURSOR PMSCHD (SN VARCHAR2)
   IS
      SELECT *
        FROM FRT_EAM_INTERFACE
       WHERE ID=LINE_ID;
BEGIN
   MO_GLOBAL.SET_POLICY_CONTEXT ('S', 81);
   FND_GLOBAL.APPS_INITIALIZE (USER_ID        => 2887,
                               RESP_ID        => 23118,
                               RESP_APPL_ID   => 426);

   FOR Z IN PMSCH
   LOOP
      BEGIN
         V_SET_NAME_ID := Z.C02;
         V_OBJECT_ID := Z.C09;
         V_OBJECT_TYPE := Z.C10;
         
         -- Header information
         P_PM_SCHEDULE_REC.SET_NAME_ID := V_SET_NAME_ID;
         P_PM_SCHEDULE_REC.NAME := Z.C03||'0';
         P_PM_SCHEDULE_REC.FROM_EFFECTIVE_DATE := SYSDATE;
         P_PM_SCHEDULE_REC.MAINTENANCE_OBJECT_ID := V_OBJECT_ID;
         P_PM_SCHEDULE_REC.MAINTENANCE_OBJECT_TYPE := V_OBJECT_TYPE;
         P_PM_SCHEDULE_REC.TYPE_CODE := V_TYPE_CODE;                      --10
         P_PM_SCHEDULE_REC.RESCHEDULING_POINT := V_RESCHEDULING_POINT;     --2
         P_PM_SCHEDULE_REC.SCHEDULING_METHOD_CODE := V_METHOD_CODE;       --10
         P_PM_SCHEDULE_REC.WHICHEVER_FIRST := 'Y';
         P_PM_SCHEDULE_REC.GENERATE_WO_STATUS := 1;
         P_PM_SCHEDULE_REC.GENERATE_NEXT_WORK_ORDER := 'N';
         P_PM_SCHEDULE_REC.DEFAULT_IMPLEMENT := 'Y';
         P_PM_SCHEDULE_REC.INCLUDE_MANUAL := 'N';
         P_PM_SCHEDULE_REC.NON_SCHEDULED_FLAG := 'N';
         P_PM_SCHEDULE_REC.INTERVAL_PER_CYCLE := 1;
         P_PM_SCHEDULE_REC.CURRENT_CYCLE := 1;
         P_PM_SCHEDULE_REC.CURRENT_SEQ := 0;
         P_PM_SCHEDULE_REC.AUTO_INSTANTIATION_FLAG := 'N';
         P_PM_SCHEDULE_REC.DAY_TOLERANCE := 1;
         P_PM_SCHEDULE_REC.TMPL_FLAG := 'N'; -- Y=Schedule_Template, N=Schedule
         P_PM_SCHEDULE_REC.SOURCE_CODE := 'EAM';
         P_PM_SCHEDULE_REC.SOURCE_LINE := '1';
         I := 1;

         FOR Y IN PMSCHD (Z.C03)
         LOOP
         
         V_ASSOCIATION_ID := Y.C04;
         V_METER_ID := Y.C05;
         
            -- Activity Template association
            -- ACTIVITY_ASSOCIATION_ID in table
            P_PM_ACTIVITIES_TBL (I).ACTIVITY_ASSOCIATION_ID :=
               V_ASSOCIATION_ID;
            P_PM_ACTIVITIES_TBL (I).INTERVAL_MULTIPLE := Y.C07;
            P_PM_ACTIVITIES_TBL (I).ALLOW_REPEAT_IN_CYCLE := 'Y';
            P_PM_ACTIVITIES_TBL (I).NEXT_SERVICE_START_DATE := NULL;
            P_PM_ACTIVITIES_TBL (I).NEXT_SERVICE_END_DATE := NULL;

            -- Rules information
            -- RULE_TYPE 1=date_rule, 2=meter_rule, 3=date_list, 4=calendar_rule
            --            P_PM_DAY_INTERVAL_RULES_TBL (J).RULE_TYPE := 1;
            --            P_PM_DAY_INTERVAL_RULES_TBL (J).DAY_INTERVAL := Y.C6;
            --            P_PM_DAY_INTERVAL_RULES_TBL (J).EFFECTIVE_DATE_FROM := SYSDATEL;
            --            P_PM_DAY_INTERVAL_RULES_TBL (J).EFFECTIVE_DATE_TO := NULL;

            P_PM_RUNTIME_RULES_TBL (J).RULE_TYPE := 2;
            P_PM_RUNTIME_RULES_TBL (J).METER_ID := V_METER_ID;
            P_PM_RUNTIME_RULES_TBL (J).RUNTIME_INTERVAL := Y.C06;
            P_PM_RUNTIME_RULES_TBL (J).EFFECTIVE_READING_FROM := 0;
            P_PM_RUNTIME_RULES_TBL (J).EFFECTIVE_READING_TO := NULL;
            I := I + 1;
         END LOOP;


         EAM_PMDEF_PUB.CREATE_PM_DEF (
            P_API_VERSION                   => 1.0,
            P_INIT_MSG_LIST                 => 'F',
            P_COMMIT                        => 'F',
            P_VALIDATION_LEVEL              => FND_API.G_VALID_LEVEL_FULL,
            P_PM_SCHEDULE_REC               => P_PM_SCHEDULE_REC,
            P_PM_ACTIVITIES_TBL             => P_PM_ACTIVITIES_TBL,
            P_PM_DAY_INTERVAL_RULES_TBL     => P_PM_DAY_INTERVAL_RULES_TBL,
            P_PM_RUNTIME_RULES_TBL          => P_PM_RUNTIME_RULES_TBL,
            P_PM_LIST_DATE_RULES_TBL        => P_PM_LIST_DATE_RULES_TBL,
            P_PM_CALENDAR_BASED_RULES_TBL   => P_PM_CALENDAR_BASED_RULES_TBL,
            X_NEW_PM_SCHEDULE_ID            => X_NEW_PM_SCHEDULE_ID,
            X_RETURN_STATUS                 => X_RETURN_STATUS,
            X_MSG_COUNT                     => X_MSG_COUNT,
            X_MSG_DATA                      => X_MSG_DATA);



         IF (X_RETURN_STATUS = 'S')
         THEN
            DBMS_OUTPUT.PUT_LINE ('Done '||Z.C03|| ' => '||X_RETURN_STATUS);
         ELSE
            DBMS_OUTPUT.PUT_LINE (
                  'ERR: '||Z.C03|| ' => '
               || FND_MSG_PUB.GET (P_MSG_INDEX   => FND_MSG_PUB.G_LAST,
                                   P_ENCODED     => FND_API.G_FALSE));
         END IF;

         COMMIT;
      EXCEPTION
         WHEN OTHERS
         THEN
            DBMS_OUTPUT.PUT_LINE ('SQLERR: ' ||Z.C03|| ' => '|| SQLERRM);
            COMMIT;
      END;
   END LOOP;
END;