DECLARE
   V_ORGANIZATION_REC   HZ_PARTY_V2PUB.ORGANIZATION_REC_TYPE;
   V_PARTY_USAGE_CODE   VARCHAR2 (50) := NULL;
   X_PARTY_ID           NUMBER;
   X_PARTY_NUMBER       VARCHAR2 (30);
   X_PROFILE_ID         NUMBER;
   X_RETURN_STATUS      VARCHAR2 (30);
   X_MSG_COUNT          NUMBER;
   X_MSG_DATA           VARCHAR2 (2000);
   V_ERROR_MSG          VARCHAR2 (2000);
   V_MODULE_NAME        VARCHAR (30) := 'HZ_CPUI';
   V_USER_ID            NUMBER := 1170;                                 --1170
   V_RESP_ID            NUMBER := 51432;                               --51432
   V_APPL_ID            NUMBER := 222;                                   --222
   V_ORG_ID             NUMBER := 81;
BEGIN
   MO_GLOBAL.INIT ('AR');
   MO_GLOBAL.SET_POLICY_CONTEXT ('S', V_ORG_ID);
   FND_CLIENT_INFO.SET_ORG_CONTEXT (V_ORG_ID);
   FND_GLOBAL.APPS_INITIALIZE (USER_ID        => V_USER_ID,             --1170
                               RESP_ID        => V_RESP_ID,            --51432
                               RESP_APPL_ID   => V_APPL_ID);             --222

   --================ CREATE PARTY =================[20]

   FOR Z IN (SELECT *
               FROM FRT_TEMP_INTERFACE
              WHERE C20 IS NULL)
   LOOP
      BEGIN
         V_ORGANIZATION_REC.ORGANIZATION_NAME := Z.C04;
         V_ORGANIZATION_REC.PARTY_REC.ATTRIBUTE5 := Z.C01;
         V_ORGANIZATION_REC.PARTY_REC.ATTRIBUTE6 := Z.C02;
         V_ORGANIZATION_REC.JGZZ_FISCAL_CODE := Z.C05;
         V_ORGANIZATION_REC.CREATED_BY_MODULE := V_MODULE_NAME;
         V_ORGANIZATION_REC.PARTY_REC.STATUS := 'A';
         V_ORGANIZATION_REC.PARTY_REC.ATTRIBUTE12 := 'A';

         HZ_PARTY_V2PUB.CREATE_ORGANIZATION (
            P_INIT_MSG_LIST      => FND_API.G_FALSE,
            P_ORGANIZATION_REC   => V_ORGANIZATION_REC,
            P_PARTY_USAGE_CODE   => V_PARTY_USAGE_CODE,
            X_PARTY_ID           => X_PARTY_ID,
            X_PARTY_NUMBER       => X_PARTY_NUMBER,
            X_PROFILE_ID         => X_PROFILE_ID,
            X_RETURN_STATUS      => X_RETURN_STATUS,
            X_MSG_COUNT          => X_MSG_COUNT,
            X_MSG_DATA           => X_MSG_DATA);

         IF X_RETURN_STATUS = 'S'
         THEN
            DBMS_OUTPUT.PUT_LINE (Z.C02 || ' => ' || X_RETURN_STATUS);
         ELSE
            V_ERROR_MSG :=
               FND_MSG_PUB.GET (P_MSG_INDEX   => FND_MSG_PUB.COUNT_MSG,
                                P_ENCODED     => 'F');

            DBMS_OUTPUT.PUT_LINE (Z.C02 || ' => ' || V_ERROR_MSG);
         END IF;


         COMMIT;
      EXCEPTION
         WHEN OTHERS
         THEN
            COMMIT;
            V_ERROR_MSG := SQLERRM;
            DBMS_OUTPUT.PUT_LINE (Z.C02 || ' => ' || V_ERROR_MSG);
      END;
   END LOOP;
END;