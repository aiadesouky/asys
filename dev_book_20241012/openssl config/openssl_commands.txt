 type		extension
==============================
PEM		.pem .crt .cer
DER		.der
PKCS#7		.p7b .p7c
PKCS#8		
PKCS#12		.p12 .pfx
JKS         .jks .jceks
===============================================
Keys
===============================================
1.generate Diffie-Hellman key
# openssl dhparam 4096 -out privatekey.key

2.generate rsa private key
# openssl genrsa -AES256 -out privatekey.key 2048

3.generate rsa public key from private key
# openssl rsa -pubout -in privatekey.key -out publickey.key

4.remove pass phrase from private key
# openssl rsa -in oldPrivateKey.key -out newPrivateKey.key

5.set pass phrase to private key
# openssl rsa -des3 -in oldPrivatekey.key -out newPrivatekey.key
 
==================================================
Requests and Certificates
==================================================
1.create root certificate from private key in one shot
# openssl req -x509 -new -nodes -sha256 -days 1826 -key rootkey.key -out rootca.crt -subj "/C=EG/O=twin/OU=ai/L=CA/ST=CA/emailAddress=admin@twin.local/CN=twin.local/" -addext "subjectAltName=DNS:twin.local,DNS:*.twin.local"

2.create private key and certificate in one shot
# openssl req -x509 -sha256 -days 3650 -newkey rsa:4096 -keyout privatekey.key -out certificate.crt -subj "/C=EG/O=twin/OU=ai/L=CA/ST=CA/emailAddress=admin@twin.local/CN=twin.local/" -addext "subjectAltName=DNS:twin.local,DNS:*.twin.local"

3.create private key without pass phrase and certificate in one shot
# openssl req -x509 -sha256 -nodes -days 3650 -newkey rsa:4096 -keyout privatekey.key -out certificate.crt -subj "/C=EG/O=twin/OU=ai/L=CA/ST=CA/emailAddress=admin@twin.local/CN=twin.local/" -addext "subjectAltName=DNS:twin.local,DNS:*.twin.local"

4.create new certificate request from existing certificate
# openssl x509 -x509toreq -in certificate.crt -signkey privatekey.key -out request.csr

5.create certificate from private key and new certificate request
# openssl x509 -req -sha256 -days 3650 -in request.csr -signkey privatekey.key -out certificate.crt

6.create new certificate request from private key
# openssl req -new -sha256 -key privatekey.key -out request.csr -subj "/C=EG/O=twin/OU=ai/L=CA/ST=CA/emailAddress=admin@twin.local/CN=twin.local/" -addext "subjectAltName=DNS:twin.local,DNS:*.twin.local"

7.create private key and new certificate request in one shot
# openssl req -new -newkey rsa:2048 -keyout privatekey.key -out request.csr -subj "/C=EG/O=twin/OU=ai/L=CA/ST=CA/emailAddress=admin@twin.local/CN=twin.local/" -addext "subjectAltName=DNS:twin.local,DNS:*.twin.local"

8.create private key without pass phrase and new certificate request in one shot
# openssl req -new -newkey rsa:2048 -nodes -keyout privatekey.key -out request.csr -subj "/C=EG/O=twin/OU=ai/L=CA/ST=CA/emailAddress=admin@twin.local/CN=twin.local/" -addext "subjectAltName=DNS:twin.local,DNS:*.twin.local"

9.create certificate from request using CA certificate and CA private key (issued by CA)
# openssl x509 -req -days 3650 -CA cacert.crt -CAkey cakey.key -set_serial 1001 -in request.csr -out certificate.crt -extfile file.ext
# openssl x509 -req -days 3650 -CA cacert.crt -CAkey cakey.key -CAcreateserial -in request.csr -out certificate.crt -extfile file.ext
--------file.ext------------
authorityKeyIdentifier=keyid,issuer 
basicConstraints=CA:FALSE
subjectAltName = @alt_names 
[alt_names] 
DNS.1 = twin.local
DNS.2 = ai.twin.local
DNS.3 = mi.twin.local
DNS.4 = *.twin.local
----------------------------
====================================================
Ketstores
====================================================
1.Create a PKCS12 keystore (.pfx .p12) from PEM certificate file and a private key
# openssl pkcs12 -export -inkey privatekey.key -in certificate.crt -out keystore.pfx

2.Create a PKCS12 keystore (.pfx .p12) from PEM certificate file and a private key and CA certificate
# openssl pkcs12 -export -inkey privatekey.crt -in certificate.crt -certfile cacert.crt -out keystore.pfx
Note: oracle bug jdk before 8u301/7u311 can't open pkcs12

3.export private keys and certificates from keystore (.pfx .p12)
# openssl pkcs12 -in keystore.pfx -nodes -out certificate.crt

4.export certificates from keystore (.pfx .p12)
# openssl pkcs12 -in keystore.pfx -nokeys -out certificate.crt

5.export private keys from keystore (.pfx .p12)
# openssl pkcs12 -in keystore.pfx -nodes -nocerts -out privatekey.crt

6.Create a DER pkcs5 privatekey file (.der) from PEM privateky file (.pem) with DES encryption
# openssl pkcs8 -topk8 -inform PEM -outform DER -in privatekey.pem -v2 des3 -out privatekey.der

7.Create a PEM privateky file (.pem) from DER pkcs8 privatekey file (.der)
# openssl pkcs8 -inform DER outform PEM -in privatekey.der -out privatekey.pem -nocrypt

8.Create a DER pkcs8 privatekey file (.der) from PEM privateky file (.pem)
# openssl pkcs8 -topk8 -inform PEM -outform DER -in privatekey.pem -out privatekey.der -nocrypt

9.Create a PEM privateky file (.pem) file from DER privateky file (.der)
# openssl rsa -inform DER -outform PEM -in privatekey.pem -out privatekey.der

10.Create a DER privateky file (.der) file from PEM privateky file (.pem)
# openssl rsa -inform PEM -outform DER -in privatekey.pem -out privatekey.der

11.Create a PEM (.crt .cer) file from DER file (.der)
# openssl x509 -inform DER -outform PEM -in certificate.der -out certificate.crt

12.Create a DER file from PEM file (.crt .cer)
# openssl x509 -inform PEM -outform DER -in certificate.crt -out certificate.der

13.Create a DER file from crl file (.pem)
# openssl crl -in crl.pem -outform DER -out crl.der

========================================================
Utils
========================================================

1.check private key
# openssl rsa-in privatekey.key -text -noout -check

2.verify new certificate request
# openssl req -in request.csr -text -noout -verify

3.view private key
# openssl rsa-in privatekey.key -text -noout

4.view new certificate request
# openssl req -in request.csr -text -noout

5.view certificate
# openssl x509 -in certificate.crt -text -noout

6.view certificate revocation list
openssl crl -in crl.pem -text -noout
openssl crl -in crl.der -text -noout

7.view KeyStore certs, keys, both
# openssl pkcs12 -info -nokeys -in keystore.p12
# openssl pkcs12 -info -nocerts -in keystore.p12
# openssl pkcs12 -info -in keystore.p12

8.Measure SSL connection time
# openssl s_time -connect secureurl.com:443 -new
# openssl s_time -connect secureurl.com:443 -reuse

9.check SSL V2, SSL V3, TLS 1.0, TLS 1.1, TLS 1.2
# openssl s_client -connect secureurl.com:443 [-ssl2|–ssl3|–tls1|–tls1_1|–tls1_2]
# openssl s_client -host secureurl.com -port 443 [-ssl2|–ssl3|–tls1|–tls1_1|–tls1_2]

10.download certificate file TLS 1.2
# openssl s_client -showcerts -connect secureurl.com:443 -tls1_2 | openssl x509 -outform PEM > certfile.crt

11.run ssl server to test certificates
# openssl s_server -key privatekey.key -cert certificate.crt -accept 443 -www

12.Measure speed of various security algorithms
# openssl speed rsa2048
# openssl speed ecdsap256
 
==================================================================
Create ca, intermediate ca and sign new entity certificate steps
==================================================================
Note: 
 mkdir rootca subca server
 cd rootca
 touch index.txt index.txt.attr serial crlnumber 
 cp# openssl_root.cnf .
 echo 1000 > serial
 echo 1000 > crlnumber
 cd subca
 touch  index.txt index.txt.attr serial crlnumber 
 cp# openssl_intermediate.cnf .
 echo 1001 > serial
 echo 1000 > crlnumber
 cd server
 cp# openssl_csr_san.cnf .

1.create privatekey
# openssl genrsa -aes256 -out rootca/rootca.key 2048

2.create root certificate from private key using configuration file
# openssl req -new -x509 -sha512 -days 3650 -config rootca/openssl_root.cnf -extensions v3_ca -key rootca/rootca.key -out rootca/rootca.crt

3.create intermediate request and private key using configuration file
# openssl req -new -newkey rsa:2048 -config subca/openssl_intermediate.cnf -keyout subca/subca.key -out subca/subca.req.csr

4.create intermediate certificate from request using configuration file
# openssl ca -days 3650 -notext -md sha512 -config rootca/openssl_root.cnf -extensions v3_intermediate_ca -in subca/subca.req.csr -out subca/subca.crt

5.create server request and private key using configuration file
# openssl req -newkey rsa:2048 -nodes -config server/openssl_csr_san.cnf -keyout server/server.key -out server/server.req.csr

6.create server certificate from request using configuration file
# openssl ca -days 3650 -notext -md sha512 -config subca/openssl_intermediate.cnf -extensions server_cert -in server/server.req.csr -out server/server.crt

7.create client request and private key
# openssl req -new -newkey rsa:2048 -keyout client.key -out client.req.csr -subj "/C=EG/O=twin/OU=ai/L=CA/ST=CA/emailAddress=admin@twin.local/CN=twin.local/"

8.create client certificate from request
# openssl x509 -req -days 3650 -CA subca/subca.crt -CAkey subca/subca.key -in client.req.csr -out client.crt
