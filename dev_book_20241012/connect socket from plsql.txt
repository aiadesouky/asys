1. import java class
====================
-------------------------------------------
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketAddress;
import java.nio.charset.StandardCharsets;

public class socketclient {

    public static String connect(String host, Integer port, Integer wait, String msg) {
        String result = "0";
        try {

            SocketAddress address = new InetSocketAddress(host, port);
            Socket client = new Socket();
            client.connect(address, 1000);
            if (client.isConnected()) {
                OutputStream outputStream = client.getOutputStream();
                InputStream inputStream = client.getInputStream();
                DataOutputStream dataOutputStream = new DataOutputStream(outputStream);
                DataInputStream dataInputStream = new DataInputStream(inputStream);

                int finish = 0;
                int sent = 0;
                long millis = System.currentTimeMillis();
                while (!client.isClosed() && finish == 0) {
                    try {
                        if (sent == 0) {
                            byte bytes[] = msg.getBytes();
                            dataOutputStream.write(bytes);
                            dataOutputStream.flush();
                            sent = 1;
                        }
                        if (dataInputStream.available() > 0) {
                            byte bytes[] = new byte[1024];
                            dataInputStream.read(bytes);
                            result = new String(bytes, StandardCharsets.UTF_8);
                            dataOutputStream.write("#".getBytes());
                            finish = 1;
                            client.close();
                        }
                        if ((System.currentTimeMillis() - millis) > wait) {
                            client.close();
                            finish = 1;
                        }
                    } catch (Exception ex) {
                        finish = 1;
                        result = "thread error " + ex.getMessage();
                    }
                }
            }
        } catch (Exception ex) {
            result = "connect error " + ex.getMessage();
        }
        return result;
    }
}
--------------------------------------------------

2. create linked plsql function
===============================
CREATE OR REPLACE
FUNCTION getweight(host varchar2,port number,wait number,msg varchar2) RETURN varchar2 AS
LANGUAGE JAVA NAME 'socketclient.connect(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.String) return java.lang.String';
/

3. grant connect permission to user
===================================

---required
EXEC dbms_java.grant_permission( 'AIDB', 'SYS:java.net.SocketPermission', '*', 'connect,resolve' );
/
EXEC dbms_java.revoke_permission('AIDB', 'SYS:java.net.SocketPermission', '*','connect,resolve'); 
/
---optional
EXEC dbms_java.grant_permission( 'AIDB', 'SYS:java.security.AllPermission', '*', null );
/
EXEC dbms_java.revoke_permission('AIDB', 'SYS:java.security.AllPermission', '*',null); 
/
SELECT * FROM USER_JAVA_POLICY;
/

4. call linked plsql function
=============================
--SET SERVEROUTPUT ON ;
DECLARE
   mystring VARCHAR2(4000);
BEGIN
   mystring := getweight('192.168.1.104',3232,100,'SI');
   dbms_output.put_line('The value is ' || mystring);
END;